#!/usr/bin/python
import os  
import matplotlib.pyplot as plt
from astropy.io import fits
import numpy
import sys
import re
import ConfigParser
import progressbar
sys.path.append(os.path.realpath('.'))
from pprint import pprint
import inquirer
from os.path import expanduser
home = expanduser("~")

#Parse the config parameters
Config=ConfigParser.ConfigParser()
Config.read(home+'/'+'hesp.config')
objname=Config.get('Headers','objname')
objtype=Config.get('Headers','objtype')
reseltype=Config.get('Headers','reseltype')
dateobs=Config.get('Headers','dateobs')
exptime=Config.get('Headers','exptime')
reselkeylow=Config.get('Keys','reselkeylow')
reselkeyhigh=Config.get('Keys','reselkeyhigh')
biaskey=Config.get('Keys','biaskey')
flatkey=Config.get('Keys','flatkey')
calibkey=Config.get('Keys','calibkey')
objectkey=Config.get('Keys','objectkey')
fits_index=int(Config.get('Fits','index'))
binsize=float(Config.get('Extraction','binsize'))
binres=float(Config.get('Extraction','binres'))
path=Config.get('Config','path')

#Open the filelist 
f = open('files.txt', 'w')

#Lists for storing the filetypes
datlist=[]
bl=[]
ol=[]
objl=[]
tharl=[]
coloh=[]
tracel=[]

#Display
print ' ___  ___  _______   ________  ________'       
print '|\  \|\  \|\  ___ \ |\   ____\|\   __  \      '
print '\ \  \\\  \ \   __/|\ \  \___|\ \  \|\  \     '
print '\ \   __  \ \  \_|/_\ \_____  \ \   ____\   ' 
print '  \ \  \ \  \ \  \_|\ \|____|\  \ \  \___|    '
print '   \ \__\ \__\ \_______\____\_\  \ \__\   '    
print '    \|__|\|__|\|_______|\_________\|__| '      
print '                       \|_________|           '
print '--------Hanle Echelle Spectrograph Pipeline---'
print '--------Beta Version--------------------------'

#Calculate number of files !Should rewrite with shell code
numfile=0
for fn in os.listdir('.'):
     if os.path.isfile(fn):
        if fn.endswith('fits'):
               numfile=numfile+1

#Start Loop
a=0
print  "'Analysing Directory...' \n"                               
for fn in os.listdir('.'):
     if os.path.isfile(fn):
        if fn.endswith('fits'):
           hdulist = fits.open(fn)
           bar = progressbar.ProgressBar(maxval=numfile, widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage(),' ', progressbar.ETA()])
           bar.start() 
	   
	   # Read data block
           try :
	     scidata=hdulist[1].data
           except:
	     scidata=hdulist[0].data
	   if len(scidata.shape)==3:
	     scidata=scidata[0]

           #Read headers and classify. Read data and compute mean,std etc..
           try:
               val=hdulist[0].header[objtype]
               kaka=str(hdulist[0].header[dateobs])
               date=kaka.split('T')[0]
               time=kaka.split('T')[1]
               dat=hdulist[0].header[dateobs]
	       exp=str(hdulist[0].header[exptime]/1000)
               a=a+1
               bar.update(a)
               if val==biaskey:
                   fn=fn.ljust(25)
                   mn='{0:.2f}'.format(scidata.mean())
                   rms='{0:.2f}'.format(scidata.std())
                   bl.append(fn.ljust(30)+mn.ljust(12)+rms.ljust(12)+date.ljust(17)+time.ljust(17))
                   coloh.append(1)
               elif val==flatkey:
                   fn=fn.ljust(20)
                   resel=hdulist[0].header[reseltype]
                   if resel==reselkeylow:
		       reselname='Low'
                   else:
                       reselname='High'
                   mn='{0:.2f}'.format(scidata.mean())
                   md='{0:.2f}'.format(numpy.median(scidata))
                   objl.append(hdulist[0].header[objname])
                   tracel.append(fn.ljust(30)+mn.ljust(12)+exp.ljust(12)+reselname.ljust(12)+date.ljust(17)+time.ljust(17))

               elif val==calibkey:
                   fn=fn.ljust(20)
                   objct=hdulist[0].header[objname]
                   resel=hdulist[0].header[reseltype]
                   if resel==reselkeylow:
		       reselname='Low'
                   else:
                       reselname='High'
                   mn='{0:.2f}'.format(scidata.mean())
                   md='{0:.2f}'.format(numpy.median(scidata))
                   objl.append(hdulist[0].header[objname])
                   tharl.append(fn.ljust(30)+mn.ljust(12)+exp.ljust(12)+reselname.ljust(12)+date.ljust(17)+time.ljust(17))

               elif val==objectkey:
                   fn=fn.ljust(20)
                   objct=hdulist[0].header[objname]
                   resel=hdulist[0].header[reseltype]
                   if resel==reselkeylow:
		       reselname='Low'
                   else:
                       reselname='High'
                   mn='{0:.2f}'.format(scidata.mean())
                   md='{0:.2f}'.format(numpy.median(scidata))
                   objl.append(hdulist[0].header[objname])
                   ol.append(fn.ljust(30)+objct.ljust(15)+mn.ljust(12)+exp.ljust(12)+reselname.ljust(12)+date.ljust(17)+time.ljust(17))
                   coloh.append(5)
           except KeyError:
		pass
bar.finish()	
f.write('BIAS\n')
f.write('File      '.ljust(30)+'Mean'.ljust(12)+'RMS'.ljust(12)+'Date'.ljust(17)+'Time'.ljust(17))
f.write('\n')
for l in bl:
	f.write(l)
	f.write('\n')
f.write('\n')
f.write('OBJECT\n')
f.write('File'.ljust(30)+'Object'.ljust(15)+'Mean'.ljust(12)+'Exposure'.ljust(12)+'Resolution'.ljust(12)+'Date'.ljust(17)+'Time'.ljust(17))
f.write('\n')

for l in ol:
	f.write(l)
	f.write('\n')	
f.write('\n')
f.write('FLAT\n')	
f.write('File'.ljust(30)+'Mean'.ljust(12)+'Exposure'.ljust(12)+'Resolution'.ljust(12)+'Date'.ljust(17)+'Time'.ljust(17))
f.write('\n')
	
for l in tracel:
	f.write(l)
	f.write('\n')	
f.write('\n')
f.write('CALIB\n')
f.write('File'.ljust(30)+'Mean'.ljust(12)+'Exposure'.ljust(12)+'Resolution'.ljust(12)+'Date'.ljust(17)+'Time'.ljust(17))
f.write('\n')

for l in tharl:
	f.write(l)
	f.write('\n')

f.close()




