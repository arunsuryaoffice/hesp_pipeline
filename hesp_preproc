#!/usr/bin/python
import ConfigParser
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.colors import LogNorm
import numpy, time
import numpy as np
import peakutils
from astropy.io import fits
from scipy.ndimage import morphology as morph
from scipy.ndimage import filters
import os
import progressbar
from time import sleep 
from hesp_lib import *
from ccdproc import  *
import pandas as pd
import pyfits
import pdb
import copy
import progressbar
from os.path import expanduser
home = expanduser("~")

#Parse the config parameters
Config=ConfigParser.ConfigParser()
Config.read(home+'/'+'hesp.config')
objname=Config.get('Headers','objname')
objtype=Config.get('Headers','objtype')
reseltype=Config.get('Headers','reseltype')
dateobs=Config.get('Headers','dateobs')
exptime=Config.get('Headers','exptime')
reselkeylow=Config.get('Keys','reselkeylow')
reselkeyhigh=Config.get('Keys','reselkeyhigh')
biaskey=Config.get('Keys','biaskey')
flatkey=Config.get('Keys','flatkey')
calibkey=Config.get('Keys','calibkey')
objectkey=Config.get('Keys','objectkey')
fits_index=int(Config.get('Fits','index'))
binsize=float(Config.get('Extraction','binsize'))
binres=float(Config.get('Extraction','binres'))
path=Config.get('Config','path')





fl = open('files.txt', 'r')	
k=fl.readlines()
bstrt=k.index('BIAS\n')
ostrt=k.index('OBJECT\n')
fstrt=k.index('FLAT\n')
cstrt=k.index('CALIB\n')
fin=len(k)

try:
    biaslist= pd.read_csv('files.txt',nrows=(ostrt-bstrt-3),sep='\s+',header=bstrt+1)
    biaslist=biaslist.File.value
except:
    biaslist=[]
try:
    objectlist= pd.read_csv('files.txt',nrows=(fstrt-ostrt-3),sep='\s+',header=ostrt)
    objectlist=objectlist.File.values
except:
    objectlist=[] 
try:
    flatlist= pd.read_csv('files.txt',nrows=(cstrt-fstrt-3),delimiter=r"\s+",header=fstrt-1)
    flatlist=flatlist.File.values
except:
    flatlist=[]    
try:
    caliblist=pd.read_csv('files.txt',nrows=(fin-cstrt-2),delimiter=r"\s+",header=cstrt-2	)
    caliblist=caliblist.File.values
except:
    caliblist=[]   


files=np.concatenate([biaslist,objectlist,flatlist,caliblist],axis=0)
a=0
print  "'Overscan and Trimming Files...' \n" 
bar = progressbar.ProgressBar(maxval=len(files), widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage(),' ', progressbar.ETA()])
bar.start()
for i in files:
        hdu= fits.open(i,do_not_scale_image_data=True)
        try :
	     scidata=hdu[1].data
        except:
	     scidata=hdu[0].data
	if len(scidata.shape)==3:
	     scidata=scidata[0]
        ccddata=CCDData(scidata,unit='adu')        
	cleanccd=ccddata
	no_scan = subtract_overscan(cleanccd, overscan=cleanccd[:, 0:50])
        no_scan_trim=trim_image(no_scan[:,50:4146])
	#cleanccd=subtract_bias(ccddata,biasdata)
	#nocos, mask = cosmicray_lacosmic(no_scan_trim.data, sigclip=25)
	#nocos, mask = cosmicray_median(no_scan_trim.data, thresh=25, mbox=11,rbox=11, gbox=5)
	hduOut =fits.PrimaryHDU(no_scan_trim)
        hduOut.header=copy.copy(hdu[0].header)
        hduOut.writeto(i[:-5]+'_pp.fit',clobber=True)
	a=a+1
	bar.update(a)
bar.finish()
files=np.concatenate([objectlist,[]],axis=0)

a=0
print  "'Cosmic Ray Correction of Files...' \n" 
bar = progressbar.ProgressBar(maxval=len(files), widgets=[progressbar.Bar('=', '[', ']'), ' ', progressbar.Percentage(),' ', progressbar.ETA()])
bar.start()
for i in files:
        hdu= fits.open(i[:-5]+'_pp.fit',do_not_scale_image_data=True)
        newdata, mask = cosmicray_lacosmic(np.array(hdu[0].data), sigclip=25)
        hduOut=fits.PrimaryHDU(newdata)
        hduOut.header=copy.copy(hdu[0].header)
        hduOut.writeto(i[:-5]+'_pp.fit',clobber=True)
	a=a+1
	bar.update(a)
bar.finish()
